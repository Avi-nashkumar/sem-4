# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LQA1KAhb4YaYKbEld1a-uhtFkkwDwJk2

EXERCISE 5
"""

def closest(age, x): 
      
    return age[min(range(len(age)), key = lambda i: abs(age[i]-x))] 

age = [2, 5, 10, 13, 23, 30, 32, 40, 60, 70]
x = int(input("enter a number, to check which age its closest, and find its index: "))
a = closest(age, x)
print(a)

index = age.index(a)
print("index: ", index)

"""QUESTION 4"""

import time

ini_pos = input('Enter Original Location: ')
while(ini_pos.isnumeric() == False):
    print("Enter a Number !")
    ini_pos = input('Enter Original Location: ')
ini_pos = int(ini_pos)
if (ini_pos > 1000):
    print("Enter a Smaller Number !")
    exit()


step = input('Enter Step Size: ')
while(step.isnumeric() == False):
    print("Enter a Number !")
    step = input('Enter Step Size: ')
step = int(step)

steps = [ini_pos]

def jump(cur_pos, step_value, side, steps):
    if cur_pos > ini_pos:
        return steps
    elif side == -1: # Negative Side
        cur_pos += step_value
        if not cur_pos > ini_pos:
            steps.append(cur_pos)
    elif side == 1: # Positive Side
        cur_pos -= step_value
        if cur_pos <= 0:
            side = -1
        steps.append(cur_pos)
    return jump(cur_pos, step_value, side, steps)

start_time = time.time()
print(jump(ini_pos, step, 1, steps))
print("--- %s seconds ---" % (time.time() - start_time))

"""QUESTION 3"""

def capitalise_nth(word):
    result = ""
    for i in range(1, len(word) + 1):
        if i % n == 0:
            result += word[i-1].upper()
        else:
            result += word[i-1]
    return result

n = int(input("enter a number: "))
word = "BennettUniversity"
print(capitalise_nth(word))

"""QUESTION 2"""

t=[20,21,22,23,24,25,26,27,28,29,30]
t.reverse()
c=int(input("Enter number of counters: "))

arr=[[] for i in range(c)]
for i in range(len(t)):
    arr[i%c].append(t[i])
print(arr)

"""QUESTION 1"""

import time

left = 10
right = 20
digits = [1, 2, 3, 7]
correct = 0

skips = []
num = 0

start_time = time.time()
for num in [x for x in range(left, right) if x not in skips] :
    if(num in skips):
        continue
    for digit in digits:
        loc = str(num)[::-1].find(str(digit))
        if (loc%2 == 0):
            correct += 1
            if (loc == len(str(num))-1):

                new_num = list(str(num))
                new_num[0] = str(int(new_num[0])+1)
                new_num = int(''.join(new_num))

                # print(f"NUM : {num} NEW_NUM : {new_num} len : {len(skips)}")
                skips = skips + list(range(num, new_num))
                correct += (new_num - num)
                if(new_num > right):
                    correct += (right - new_num - 1)
            break

print(correct)
print("--- %s seconds ---" % (time.time() - start_time))